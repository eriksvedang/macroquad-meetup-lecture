* Create project
$ cargo new <name>

* Edit Cargo.toml
#+begin_src
[dependencies]
macroquad = "0.4"
#+end_src

* Run it
$ cargo run

* A minimal application (edit main.rs)
#+begin_src
use macroquad::prelude::*;

#[macroquad::main("Lecture")]
async fn main() {
    loop {
        clear_background(WHITE);
        next_frame().await;
    }
}
#+end_src

* Why `async`?
Makes an infinite loop like the one above work on all platforms, e.g. WASM.
`next_frame()` gives the executing thread a chance to do other things.

* Let's add a player (also known as a movable circle)
#+begin_src
    struct Player {
        position: Vec2,
        hp: u32,
    }
#+end_src

In the beginning of the main function:
#+begin_src
    let player = Player {
        position: vec2(screen_width() * 0.5, screen_height() * 0.5),
        hp: 100,
    };
#+end_src

And in the loop:
#+begin_src
    draw_circle(
        player.position.x,
        player.position.y,
        player.hp as f32 * 0.2,
        BLACK,
    );
#+end_src

* Now we want to move the player, let's get inputs
#+begin_src
fn get_input() -> Vec2 {
    let mut x = 0.0;
    let mut y = 0.0;

    if is_key_down(KeyCode::A) {
        x -= 1.0;
    }

    if is_key_down(KeyCode::D) {
        x += 1.0;
    }

    if is_key_down(KeyCode::W) {
        y -= 1.0;
    }

    if is_key_down(KeyCode::S) {
        y += 1.0;
    }

    vec2(x, y)
}
#+end_src

And in the beginning of the loop:
#+begin_src
  player.position += get_input();
#+end_src

Need to make `player` mutable!

To get the same speed when moving diagonally:
#+begin_src
  vec2(x, y).clamp_length(0.0, 1.0)
#+end_src

* Let's add `speed` to the Player struct
#+begin_src
struct Player {
    position: Vec2,
    speed: f32,
    hp: u32,
}
#+end_src

#+begin_src
  let mut player = Player {
    ...
    speed: 150.0,
  };
#+end_src

#+begin_src
  player.position += get_input() * player.speed * get_frame_time();
#+end_src

* Let's create a function that handles drawing the player!
Requires "borrowing", probably the most famous feature of Rust:
#+begin_src
pub fn draw(player: &Player) {
    draw_circle(
        player.position.x,
        player.position.y,
        player.hp as f32 * 0.2,
        BLACK,
    );
}
#+end_src

* Lets do that with the input handling too
That requires a mutable borrow:
#+begin_src
pub fn update(player: &mut Player) {
    player.position += get_input() * player.speed * get_frame_time();
}
#+end_src

* Maybe we want to organize our code even better?
Let's do two things:
- Move the Player struct to its own module.
- Associate the rendering and updating of the player more clearly with the Player struct.

* The new player.rs
#+begin_src
use macroquad::prelude::*;

pub struct Player {
    pub position: Vec2,
    pub speed: f32,
    pub hp: u32,
}

impl Player {
    pub fn draw(&self) {
        draw_circle(
            self.position.x,
            self.position.y,
            self.hp as f32 * 0.2,
            BLACK,
        );
    }

    pub fn update(&mut self, input: Vec2, dt: f32) {
        self.position += input * self.speed;
    }
}
#+end_src

* Need to add some things in main.rs
Add the module as a child module of the top crate of the project:
#+begin_src
  mod player;
#+end_src

And qualify the struct name:

#+begin_src
  player::Player
#+end_src

Which lets us write the loop like so:

#+begin_src
    loop {
        clear_background(WHITE);
        player.update(get_input(), get_frame_time());
        player.draw();
        next_frame().await;
    }
#+end_src
* Perhaps we want to shoot bullets? Let's add a struct for that
#+begin_src
use macroquad::prelude::*;

pub struct Bullet {
    pub pos: Vec2,
    pub dir: f32,
    pub speed: f32,
}
#+end_src

* Add the module to main.rs and use it

#+begin_src
  mod bullet;
  use bullet::Bullet;
#+end_src

* Create a Vec to hold the bullets
#+begin_src

let mut bullets: Vec<Bullet> = Vec::new();
#+end_src

* Then check for mouse clicks, update and draw the bullets in the main loop
#+begin_src
        if is_mouse_button_pressed(MouseButton::Left) {
            bullets.push(Bullet {
                pos: player.position,
                dir: 0.0,
                speed: 100.0,
            })
        }

        for bullet in &mut bullets {
            bullet.pos += Vec2::from_angle(bullet.dir) * get_frame_time() * bullet.speed;
            draw_circle(bullet.pos.x, bullet.pos.y, 10.0, RED);
        }
#+end_src

* Want to remove bullets if they are outside the screen
#+begin_src
  bullets.retain(|bullet| bullet.pos.x < screen_width() - 50.0);
#+end_src

* Let's say we want to handle more of the shooting logic inside the player
* We want to return an "action" from the player, if it is shooting
#+begin_src
    pub fn update(&mut self, input: Vec2, dt: f32) -> Option<Bullet> {
        self.position += input * self.speed * dt;

        if is_mouse_button_pressed(MouseButton::Left) {
            let mouse_pos: Vec2 = mouse_position().into();
            Some(Bullet {
                pos: self.position,
                dir: (mouse_pos - self.position).to_angle(),
                speed: 200.0,
            })
        } else {
            None
        }
    }
#+end_src

* In the main loop, we now check if `update` returns a "Some"

#+begin_src
if let Some(bullet) = player.update(get_input(), get_frame_time()) {
    bullets.push(bullet);
}
#+end_src

* The bullet destruction needs to change a bit too
#+begin_src
  bullets.retain(|bullet| bullet.pos.distance(player.position) < 300.0);
#+end_src

* Maybe you don't trust that the bullet is actually deleted? We can implement `Drop`!
#+begin_src
impl Drop for Bullet {
    fn drop(&mut self) {
        println!("The bullet at {} was dropped.", self.pos);
    }
}
#+end_src

Note -- actually not needed for most types, the "drop glue" is always
added and will recursively call the destructors on all fields of the
struct.

* Perhaps we want to create a second player, how do we copy the current one?
#+begin_src
  let mut player2 = player;
#+end_src

This does NOT work! See error message. We can't move the player to the
player2 variable, and keep using the old variable.

* Need to .clone()
#+begin_src
  let mut player2 = player.clone();
  player2.speed = 50.0;
#+end_src

* Implementing it
#+begin_src
impl Clone for Player {
    fn clone(&self) -> Self {
        Player {
            position: self.position, // N.B. No need to clone here, the type is Copy:able
            speed: self.speed,
            hp: self.hp,
        }
    }
}
#+end_src

* But there's an easier way
#+begin_src
  #[derive(Clone)]
  pub struct Player { ... }
#+end_src

* Since all of the members of player are Copy:able, we can make Player implement the Copy trait too
#+begin_src
  #[derive(Clone, Copy)]
#+end_src

* Now, we can use Player freely, and it will be copied for us
#+begin_src
  let mut player2 = player;
#+end_src

* Deriving traits is super handy, let's add Debug too
#+begin_src
  #[derive(Clone, Copy, Debug)]
#+end_src

* Now we can print debugging information for the players in the game window:
#+begin_src
draw_text(&format!("P1 {:?}", player), 10.0, 32.0, 16.0, BLACK);
draw_text(&format!("P2 {:?}", player2), 10.0, 64.0, 16.0, BLACK);
#+end_src

* Combines macros (which write code for us) with the trait system (which is kind of like interfaces)
